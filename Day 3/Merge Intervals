Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104


class Solution {
     public int[][] merge(int[][] intervals) {
        List<int[]> intervalList = new ArrayList<>();
        
        int max=-1;
        for(int i=0;i<intervals.length;i++) {
            if(intervals[i][1]>max) max=intervals[i][1];
        }
        
        int[] arr = new int[max+1];
        for(int i=0;i<arr.length;i++) arr[i]=-1;
        
        for(int i=0;i<intervals.length;i++){
            arr[intervals[i][0]]=Math.max(arr[intervals[i][0]],intervals[i][1]);
        }
        int i=0;
        while(i<arr.length){
            if(arr[i]==-1) {
                i++;
                continue;
            }
            int start=i;
            int end=arr[i];
            while(i<=end){
                if(arr[i]>end) end=arr[i];
                i++;
            }
            intervalList.add(new int[]{start,end});
        }
        
        return intervalList.toArray(new int[intervalList.size()][]);
    }
}

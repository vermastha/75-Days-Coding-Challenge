Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
 

Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?


class Solution {
    public int[] sortedSquares(int[] nums) {
        
  int []res=new int[nums.length];
        int l=0;
        int r=nums.length-1;
        
        for (int p=nums.length-1; p>=0; p--){
            if(Math.abs(nums[l])<Math.abs(nums[r])){
                res[p]=nums[r]*nums[r];
                r--;
            }
            else{
                res[p]=nums[l]*nums[l];
                l++;
            }
        }
        return res;
}
}
